{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGrisItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategoria","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","cat","type","value","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGrisItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAAkB,EAEPC,mBAAS,IAFF,mBAEpCC,EAFoC,KAExBC,EAFwB,KAiB3C,OACI,sBAAMC,SAVY,SAACC,GACnBA,EAAEC,iBAECJ,EAAWK,QACVP,GAAa,SAAAQ,GAAG,OAAKN,GAAL,mBAAmBM,QAMvC,SACI,uBACIC,KAAK,OACLC,MAAOR,EACPS,SAlBe,SAACN,GACxBF,EAAcE,EAAEO,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,8DAGII,MAAMF,GAHV,cAGbG,EAHa,gBAKEA,EAASC,OALX,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAM,CACFC,GAAGD,EAAIC,GACPC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAcZM,GAdY,4CAAH,sDCDPO,EAAc,SAAC,GAAsB,IAArBJ,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIpC,OAFAc,QAAQC,IAAIN,GAGR,sBAAKO,UAAU,yCAAf,UACG,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCJFS,EAAU,SAAC,GAAiB,IAAhBrB,EAAe,EAAfA,UAAe,ECFX,SAACA,GAAc,IAAD,EACbb,mBAAS,CAC/BoB,KAAK,GACLe,SAAQ,IAH2B,mBAChCC,EADgC,KACzBC,EADyB,KAgBvC,OAVAC,qBAAU,WACN1B,EAAQC,GACP0B,MAAK,SAAAhB,GACEc,EAAS,CACLjB,KAAMG,EACNY,SAAQ,SAGrB,CAACtB,IAEGuB,EDXuBI,CAAa3B,GAA/Ba,EAHwB,EAG7BN,KAAYe,EAHiB,EAGjBA,QAEnB,OACI,qCACA,6BAAKtB,IACJsB,GAAW,mBAAGJ,UAAU,mCAAb,sBACZ,qBAAKA,UAAU,WAAf,SAEQL,EAAOJ,KAAI,SAAAC,GAAG,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEb/BiB,EAAe,WAAM,MAKIzC,mBAAS,CAAC,cALd,mBAKvBa,EALuB,KAKZd,EALY,KAa9B,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,aAAcA,IAC3B,uBAEA,6BAEQc,EAAUS,KAAK,SAAAf,GAAG,OACd,cAAC,EAAD,CAAmBM,UAAWN,GAAhBA,Y,MCrBtCmC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0dad2a59.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { PropTypes  } from \"prop-types\";\r\n\r\n\r\nexport const AddCategory = ({setCategoria}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handledInputChange = (e) =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handledSubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim()){\r\n            setCategoria(cat => [inputValue,...cat]);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={handledSubmit}>\r\n            <input \r\n                type=\"text\" \r\n                value={inputValue} \r\n                onChange={handledInputChange}/>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategoria: PropTypes.func.isRequired\r\n}","\r\n\r\n\r\nexport const getGifs = async(categoria) =>{\r\n    const url = `https:\\\\api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=5&api_key=yEduznTTaCLeQK3bv6ycWoEG2QTHk15Y`;\r\n\r\n    const response = await fetch(url);\r\n\r\n    const {data} = await response.json(); \r\n\r\n    const gifs = data.map( img =>{\r\n        return{\r\n            id:img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGrisItem = ({id, title, url}) => {\r\n\r\n    console.log(id);\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n           <img src={url} alt={title}/>\r\n           <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","//import React, { useEffect, useState } from 'react'\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGrisItem } from './GifGrisItem';\r\n\r\nexport const GifGrid = ({categoria}) => {\r\n\r\n\r\n    const {data:images,loading} = useFetchGifs(categoria);\r\n\r\n    return (  \r\n        <>\r\n        <h3>{categoria}</h3>\r\n        {loading && <p className='animate__animated animate__flash'>Cargando</p>}\r\n        <div className='cardGrid'>\r\n            {\r\n                images.map(img=>(\r\n                      <GifGrisItem key={img.id} {...img}/>\r\n                ))\r\n            }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const  useFetchGifs = (categoria) =>{\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(categoria)\r\n        .then(img =>{\r\n                setState({\r\n                    data: img,\r\n                    loading:false\r\n                 });\r\n        });\r\n    }, [categoria]);\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n\r\n    //const categoria = ['One Punch','Samurai X','Dragon ball'];\r\n\r\n    const [categoria, setCategoria] = useState(['One Punch']);\r\n\r\n/*\r\n    const handleAdd = (e) => {\r\n        //setCategoria([...categoria,'One Piece']);\r\n        setCategoria(cat => [...cat,'One Piece']);\r\n    }\r\n*/\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategoria={setCategoria}/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categoria.map( cat =>(\r\n                        <GifGrid key={cat} categoria={cat}/>\r\n                    ))\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}